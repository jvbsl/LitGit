name: LitGit build

on:
  push:
    branches:
      - master
      - develop
      - feature/actions
      - feature/gh-release
  pull_request:
jobs:
  build:
    env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: 
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v1
    - name: Build Linux
      run: ./build.sh
      if: matrix.os == 'ubuntu-latest'
    - name: Build Windows
      id: winbuild
      run: |
        .\build.ps1
        echo "::set-output name=LITGIT_VERSION_FULL::$(cat LitGit.FullVersion)"
      if: matrix.os == 'windows-latest'
    - name: Run tests
      run: ./test.sh
      working-directory: Test
      shell: bash
    - name: Deploy Nuget Package
      run: ./tools/nuget push ./output/*.nupkg -ApiKey $NUGET_API_KEY -Source https://api.nuget.org/v3/index.json
      shell: bash
      if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.winbuild.outputs.LITGIT_VERSION_FULL }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/master' }}
      if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output/litgit.tar.gz
        asset_name: litgit.tar.gz
        asset_content_type: application/gzip
      if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'