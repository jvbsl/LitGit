#!/bin/bash
echoerr(){ >&2 echo $@; }
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TOOL_DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$TOOL_DIRECTORY/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
TOOL_DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

TEMPLATE_SEARCH_DIR="$TOOL_DIRECTORY"
CONFIG_FILE="$TOOL_DIRECTORY/LitGit.config"
if [ -f "$CONFIG_FILE" ];
then
    readarray -t EXTERNAL_VARIABLES < $CONFIG_FILE
else
    EXTERNAL_VARIABLES=()
fi

TEMPLATE_FILES=()
OUTPUT_FILES=()
PARSING_TEMPLATE_FILES=false
PARSING_OUTPUT_FILES=false
USE_MACHINE_OUTPUT=false
VERBOSE_OUTPUT=false
for i in "$@"
do
case $1 in

    -h|--help)
    echo -e "Usage: LitGit [options]"
    echo -e "Extracts meta information from git. Like version information from tag and commit. Authors and many more."
    echo -e "see https://github.com/jvbsl/LitGit"
    echo ""
    echo -e "Options:"
    echo -e "\t-c, --config <config file>\t\t\tPath to a LitGit configuration file(This can be used more than once, order is kept between config files and parameters):"
    echo -e "\t\t\t\t\t\t\t\t see https://github.com/jvbsl/LitGit"
    echo -e "\t-p, --parameter \"PARAMETERNAME=VALUE\"\t\tConfiguration property to set(This can be used more than once, order is kept between config files and parameters)"
    echo -e "\t-s, --searchpath <path>\t\t\t\tPath to a directory in which to search for *.template files. Default is directory of script."
    echo -e "\t-d, --destination-dir <path>\t\t\tThe output directory to which the templated files are written, if not specified otherwise by (-o | --outputs)."
    echo -e "\t-t, --templates\t<templatefile1> <templatefile2>\tSpecific *.template files to process corresponding to a specific outputfile declaration."
    echo -e "\t\t\t\t\t\t\t   If no corresponding outputfile is specified the output name is derived from template file name without '.template' extension"
    echo -e "\t\t\t\t\t\t\t   and the output directory is the specified or default (-d | --destination-dir)."
    echo -e "\t-o, --outputs\t<outputfile1>   <outputfile2>\tThe output files generated from the corresponding template files. see (-t | --templates)."
    echo -e "\t-m, --machine-output\t\t\t\tGenerate machine friendlier output."
    echo -e "\t-v, --verbose\t\t\t\tGenerate verbose output."   
    exit 0
    ;;
    -c|--config)
	PARSING_TEMPLATE_FILES=false
	PARSING_OUTPUT_FILES=false
    CONFIG_FILE="$2"
	if [ ! -f "$CONFIG_FILE" ]; then { echo >&2 "Error: Configfile '$CONFIG_FILE' not found! Aborting." ; exit 1; } fi

	while IFS=  read -r -d $'\0'; do
	    readarray -t TMP < $REPLY
	    EXTERNAL_VARIABLES+=("${TMP[@]}")
	done < <(find $(dirname "$CONFIG_FILE") -maxdepth 1 -name "$(basename "$CONFIG_FILE") -print0" 2> /dev/null)

    shift
	shift
    ;;
    -p|--parameter)
	PARSING_TEMPLATE_FILES=false
	PARSING_OUTPUT_FILES=false
    EXTERNAL_VARIABLES+=("$2")
    
    shift
	shift
    ;;
    -s|--searchpath)
	PARSING_TEMPLATE_FILES=false
	PARSING_OUTPUT_FILES=false
    TEMPLATE_SEARCH_DIR="$2"
	if [ ! -d "$TEMPLATE_SEARCH_DIR" ]; then { echo >&2 "Error: Template search directory '$TEMPLATE_SEARCH_DIR' not found! Aborting." ; exit 1; } fi
    shift
	shift
    ;;
    -d|--destination-dir)
	PARSING_TEMPLATE_FILES=false
	PARSING_OUTPUT_FILES=false
    OUTPUT_DIR="$2"
	mkdir -p "$OUTPUT_DIR" || { echo >&2 "Error: Could not create output directory '$OUTPUT_DIR'. Aborting."; exit 1; }
    shift
	shift
    ;;
    -t|--templates)
	PARSING_TEMPLATE_FILES=true
	PARSING_OUTPUT_FILES=false
	shift
    ;;
    -o|--outputs)
	PARSING_TEMPLATE_FILES=false
	PARSING_OUTPUT_FILES=true
	shift
    ;;
    -m|--machine-output)
    USE_MACHINE_OUTPUT=true
    shift
    ;;
    -v|--verbose)
    VERBOSE_OUTPUT=true
    shift
    ;;
    *)
    	if [ "$PARSING_TEMPLATE_FILES" = true ];
		then
	        while IFS=  read -r -d $'\0'; do
			    TEMPLATE_FILES+=("$TMP")
		    done < <(find $(dirname "$1") -maxdepth 1 -name "$(basename "$1") -print0" 2> /dev/null)
			shift
		elif [ "$PARSING_OUTPUT_FILES" = true ];
		then
			OUTPUT_FILES+=("$1")
			shift
		elif [ ! -z "$1" ];
		then
			{ echo >&2 "Error: Invalid Argument: '$1! Aborting." ; exit 1; }
		fi
    ;;
esac
done
if [ ${#OUTPUT_FILES[@]} -gt ${#TEMPLATE_FILES[@]} ];
then
	{ echo >&2 "Error: Too many output files specified! Aborting." ; exit 1; }
fi
if [ ${#TEMPLATE_FILES[@]} -eq 0 ]; then
    TEMPLATE_FILES=()
    while IFS=  read -r -d $'\0'; do
        TEMPLATE_FILES+=("$REPLY")
    done < <(find $TEMPLATE_SEARCH_DIR -maxdepth 1 -name '*.template' -print0 2> /dev/null)
fi

for ((i=0; i< ${#TEMPLATE_FILES[@]} ;i++)); do
	[ -f "${TEMPLATE_FILES[$i]}" ] || continue
	if [ ${#OUTPUT_FILES[@]} -le $i ];
	then
		if [ ! -f "${TEMPLATE_FILES[$i]}" ]; then { echo >&2 "Error: Template file '${TEMPLATE_FILES[$i]}' not found! Aborting." ; exit 1; } fi
        
        OUTPUT_FILE=${TEMPLATE_FILES[$i]}
        if [ -z ${var+x} ];
        then
            TEMP_OUTPUT_DIR=$(dirname "${OUTPUT_FILE}")
        else
            TEMP_OUTPUT_DIR=$OUTPUT_DIR
        fi
		OUTPUT_FILE="${OUTPUT_FILE%.*}"
		OUTPUT_FILE=${OUTPUT_FILE##*/}
		OUTPUT_FILES[$i]="$TEMP_OUTPUT_DIR/$OUTPUT_FILE"
	fi
done



command -v git >/dev/null 2>&1 || { echo >&2 "Error: git command not found in PATH. Aborting."; exit 1; }


git rev-parse --git-dir >/dev/null 2>&1 || { echo >&2 "Error: no git repository found in path. Aborting."; exit 1; }


LAST_TAG=$(git describe --abbrev=0 --tags)

while [[ $(echo $LAST_TAG | grep -Eo "^([0-9]+\.)*[0-9]+\-*.*?$") != $LAST_TAG ]]; do
    LAST_TAG=$(git describe --abbrev=0 --tags $LAST_TAG^)
done

CURRENT_COMMIT=$(git log -1 --pretty="%H")

$VERBOSE_OUTPUT && echo "[INFO] Verbose output activated"

MATCHING_COMMIT=$(git rev-parse $LAST_TAG)
if [ "$USE_MACHINE_OUTPUT" = "true" ]; then
    echoerr "$LAST_TAG $MATCHING_COMMIT"
fi
echo "Last Tag: $LAST_TAG on commit $MATCHING_COMMIT"

# git cat-file -p $MATCHING_COMMIT

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" = "HEAD" ]; then
    CURRENT_BRANCH=$(git branch --remote --verbose --no-abbrev --contains | sed -rne 's/^[^\/]*\/([^\ ]+).*$/\1/p')
fi


$VERBOSE_OUTPUT && echo "[INFO] Current branch: $CURRENT_BRANCH"

if [[ $LAST_TAG =~ "-"  ]];
then
	TEMP=${LAST_TAG#*\-} 
	BASE_VERSION=${LAST_TAG%"-$TEMP"}
	if [ ! -z "$TEMP" ];
	then
		VERSION_ADDITIONAL="-$TEMP"
	fi

else

	if [ "$CURRENT_BRANCH" = "master" ];
	then
		VERSION_ADDITIONAL=""

	else

		VERSION_ADDITIONAL="-alpha"
	fi
	BASE_VERSION=$LAST_TAG
fi

if [ "$USE_MACHINE_OUTPUT" = "true" ]; then
    echoerr "$CURRENT_BRANCH -> $BASE_VERSION*$VERSION_ADDITIONAL"
fi

$VERBOSE_OUTPUT && echo "[INFO] Current Branch: $CURRENT_BRANCH -> $BASE_VERSION*$VERSION_ADDITIONAL"

TEMP_VERSION=( ${BASE_VERSION//./ } )
VERSION_MAJOR=${TEMP_VERSION[0]}
VERSION_MINOR=${TEMP_VERSION[1]}
VERSION_BUILD=${TEMP_VERSION[2]}
VERSION_REVISION=${TEMP_VERSION[3]}

INITIAL_COMMIT=$(git rev-list --max-parents=0 HEAD)

REMOTE_URL=$(git remote get-url --all origin 2> /dev/null | head -n 1)

$VERBOSE_OUTPUT && echo "[INFO] Initial Commit: $INITIAL_COMMIT"

if [[ $REMOTE_URL =~ "@" ]];
then
	TEMP=${REMOTE_URL#*@}
	REMOTE_URL_HTTPS=https://${TEMP/:/\/}
	REMOTE_URL_SSH=$REMOTE_URL

else

	REMOTE_URL_HTTPS=$REMOTE_URL
fi

$VERBOSE_OUTPUT && echo "[INFO] Remote url: $REMOTE_URL_HTTPS"

YEAR=$(date +"%Y")
# SET DEFAULT VALUES
PRODUCT=$(basename -s .git `git config --get remote.origin.url` 2> /dev/null) # 
#AUTHORS=$(git log --all --format='%aN %cE' | sort -u)
AUTHORS=$(git --no-pager show -s --format='%an' $INITIAL_COMMIT) # Author of initiial commit
COMPANY="$AUTHORS"
PROJECT_URL="$REMOTE_URL_HTTPS"
COPYRIGHT="Copyright (c) $AUTHORS $YEAR"
DESCRIPTION=""

$VERBOSE_OUTPUT && echo "[INFO] Before Additional parsing"
$VERBOSE_OUTPUT && echo "[INFO] Year: $YEAR"
$VERBOSE_OUTPUT && echo "[INFO] Product: $PRODUCT"
$VERBOSE_OUTPUT && echo "[INFO] Authors: $AUTHORS"
$VERBOSE_OUTPUT && echo "[INFO] Company: $COMPANY"
$VERBOSE_OUTPUT && echo "[INFO] Project url: $PROJECT_URL"
$VERBOSE_OUTPUT && echo "[INFO] Copyright: $COPYRIGHT"
$VERBOSE_OUTPUT && echo ""

# copied from https://stackoverflow.com/questions/415677/how-to-replace-placeholders-in-a-text-file/40167919#40167919
expandVarsStrict(){
  local line lineEscaped
  while IFS= read -r line || [[ -n $line ]]; do  # the `||` clause ensures that the last line is read even if it doesn't end with \n
    # Escape ALL chars. that could trigger an expansion..
    IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '`([$' '\1\2\3\4')
    # ... then selectively reenable ${ references
    lineEscaped=${lineEscaped//$'\4'{/\${}
    # Finally, escape embedded double quotes to preserve them.
    lineEscaped=${lineEscaped//\"/\\\"}
    eval "printf '%s\n' \"$lineEscaped\"" | tr '\1\2\3\4' '`([$'
  done
}




if [ -z "$VERSION_REVISION" ];
then
    VERSION_REVISION=0
fi
VERSION_REVISION=$(( $VERSION_REVISION + $(git log --no-merges --oneline $MATCHING_COMMIT... | wc -l) ))
VERSION_SHORT="$VERSION_MAJOR.$VERSION_MINOR"
VERSION_SHORT_BUILD="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUILD"
VERSION_LONG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUILD.$VERSION_REVISION"
VERSION_FULL="$VERSION_LONG$VERSION_ADDITIONAL"
INFORMATIONAL_VERSION=$VERSION_FULL+$CURRENT_BRANCH:$CURRENT_COMMIT

declare -A AVAILABLE_VARIABLES

for line in "${EXTERNAL_VARIABLES[@]}"
do

    while IFS="=" read -r name value
    do
	    if [ ! -z "$name" ];
	    then
		    expanded=$(expandVarsStrict <<< "${value//\"/}")
		    #expanded=$(echo $expanded)	
		    expanded=$(echo "'$expanded'")
		    eval $name=$expanded
	        $VERBOSE_OUTPUT && echo "[INFO] Config - Set variable '$name' = $expanded"
            AVAILABLE_VARIABLES[$name]=$expanded
	    fi
    done < <(printf '%s\n' "$line")
done


[ ${AVAILABLE_VARIABLES[VERSION_SHORT]+abc} ] || VERSION_SHORT="$VERSION_MAJOR.$VERSION_MINOR"
[ ${AVAILABLE_VARIABLES[VERSION_SHORT_BUILD]+abc} ] || VERSION_SHORT_BUILD="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUILD"
[ ${AVAILABLE_VARIABLES[VERSION_LONG]+abc} ] || VERSION_LONG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUILD.$VERSION_REVISION"
[ ${AVAILABLE_VARIABLES[VERSION_FULL]+abc} ] || VERSION_FULL="$VERSION_LONG$VERSION_ADDITIONAL"
[ ${AVAILABLE_VARIABLES[INFORMATIONAL_VERSION]+abc} ] || INFORMATIONAL_VERSION=$VERSION_FULL+$CURRENT_BRANCH:$CURRENT_COMMIT


AVAILABLE_VARIABLES[VERSION_MAJOR]=$VERSION_MAJOR
AVAILABLE_VARIABLES[VERSION_MINOR]=$VERSION_MINOR
AVAILABLE_VARIABLES[VERSION_BUILD]=$VERSION_BUILD
AVAILABLE_VARIABLES[VERSION_REVISION]=$VERSION_REVISION
AVAILABLE_VARIABLES[CURRENT_BRANCH]=$CURRENT_BRANCH
AVAILABLE_VARIABLES[MATCHING_COMMIT]=$MATCHING_COMMIT
AVAILABLE_VARIABLES[LAST_TAG]=$LAST_TAG
AVAILABLE_VARIABLES[CURRENT_COMMIT]=$CURRENT_COMMIT
AVAILABLE_VARIABLES[VERSION_SHORT]=$VERSION_SHORT
AVAILABLE_VARIABLES[VERSION_SHORT_BUILD]=$VERSION_SHORT_BUILD
AVAILABLE_VARIABLES[VERSION_LONG]=$VERSION_LONG
AVAILABLE_VARIABLES[VERSION_FULL]=$VERSION_FULL
AVAILABLE_VARIABLES[INFORMATIONAL_VERSION]=$INFORMATIONAL_VERSION
AVAILABLE_VARIABLES[YEAR]=$YEAR
AVAILABLE_VARIABLES[PRODUCT]=$PRODUCT
AVAILABLE_VARIABLES[AUTHORS]=$AUTHORS
AVAILABLE_VARIABLES[COMPANY]=$COMPANY
AVAILABLE_VARIABLES[PROJECT_URL]=$PROJECT_URL
AVAILABLE_VARIABLES[COPYRIGHT]=$COPYRIGHT

if [ "$USE_MACHINE_OUTPUT" = "true" ];
then
    echoerr "${#AVAILABLE_VARIABLES[@]}"
    for varName in "${!AVAILABLE_VARIABLES[@]}"; do
        echoerr "$varName=${AVAILABLE_VARIABLES[$varName]}"
    done
fi

$VERBOSE_OUTPUT && echo "[INFO] After Additional parsing"
$VERBOSE_OUTPUT && echo "[INFO] Year: $YEAR"
$VERBOSE_OUTPUT && echo "[INFO] Product: $PRODUCT"
$VERBOSE_OUTPUT && echo "[INFO] Authors: $AUTHORS"
$VERBOSE_OUTPUT && echo "[INFO] Company: $COMPANY"
$VERBOSE_OUTPUT && echo "[INFO] Project url: $PROJECT_URL"
$VERBOSE_OUTPUT && echo "[INFO] Copyright: $COPYRIGHT"
$VERBOSE_OUTPUT && echo ""


for ((i=0; i< ${#TEMPLATE_FILES[@]} ;i++)); do
	INPUT_FILE=${TEMPLATE_FILES[$i]}
	[ -f "$INPUT_FILE" ] || continue
	OUTPUT_FILE=${OUTPUT_FILES[$i]}

    if [ "$USE_MACHINE_OUTPUT" = "true" ];
    then
        echoerr "$OUTPUT_FILE"
    fi
    echo "Create templated file $OUTPUT_FILE..."
	expandVarsStrict < "$INPUT_FILE" >"$OUTPUT_FILE"
done
