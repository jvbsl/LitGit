<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <ScriptExe Condition="'$(OS)' == 'Windows_NT'" >powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass</ScriptExe>
        <ScriptExe Condition="'$(OS)' != 'Windows_NT'" >bash</ScriptExe>
        <ScriptPrefix Condition="'$(OS)' == 'Windows_NT'" >&quot;&amp;</ScriptPrefix>
        <ScriptPostfix  Condition="'$(OS)' == 'Windows_NT'" >&quot;</ScriptPostfix>

        <ScriptFileEnding Condition="'$(OS)' == 'Windows_NT'" >.ps1</ScriptFileEnding>
        <ScriptFileEnding Condition="'$(OS)' != 'Windows_NT'" ></ScriptFileEnding>

        <LitGit>'$(MSBuildThisFileDirectory)../tools/LitGit$(ScriptFileEnding)'</LitGit>
        <LitGitVerboseOutputAppendix Condition="$(LitGitVerboseOutput) != ''">--verbose</LitGitVerboseOutputAppendix>
    </PropertyGroup>

    <ItemGroup>
        <LitGitTemplates Include="@(LitGitTemplateReference)"/>
    </ItemGroup>
    
    <!--<PropertyGroup>
      <CoreCompileDependsOn>BuildLitGitVersions;$(CoreCompileDependsOn)</CoreCompileDependsOn>
    </PropertyGroup>-->
    <Target Name="BuildLitGitVersions" BeforeTargets="BeforeBuild;PreBuildEvent" Inputs="@(LitGitTemplates);FAKE_INPUT" Outputs="@(LitGitTemplates->'%(rootdir)%(directory)%(filename)');FAKE_OUTPUT">
    
        <Exec Command="$(ScriptExe) $(ScriptPrefix)$(LitGit) -s  $(MSBuildProjectDirectory) $(LitGitVerboseOutputAppendix) -m -t '%(LitGitTemplates.FullPath)'$(ScriptPostfix)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" ItemName="OutputOfExec" />
        </Exec>
        <ItemGroup>
            <LitGitVariables Include="%(OutputOfExec.Identity)" Condition="$([System.String]::new('%(OutputOfExec.Identity)').Contains('='))" />
            <LitGitFiles Include="$([MSBuild]::MakeRelative($(ProjectDir), %(OutputOfExec.Identity)))" Condition="Exists('%(OutputOfExec.Identity)')" />
        </ItemGroup>

        <ItemGroup>
            <LitGitFilesCompilable Include="@(LitGitFiles)" Condition="('%(Extension)' == '.cs') Or ('%(Extension)' == '.vb') Or ('%(Extension)' == '.fs')" />
            <LitGitFilesProjects Include="@(LitGitFiles)" Condition="('%(Extension)' == '.target') Or ('%(Extension)' == '.props')" />
            <LitGitFilesNone Include="@(LitGitFiles)" Condition="!(('%(Extension)' == '.cs') Or ('%(Extension)' == '.vb') Or ('%(Extension)' == '.fs'))" />
        </ItemGroup>
        <ItemGroup>
            <Compile Remove="%(LitGitFilesCompilable.Identity)" />
            <Compile Include="%(LitGitFilesCompilable.Identity)">
                <DependentUpon>%(LitGitFilesCompilable.Identity).template</DependentUpon>
            </Compile>
            <None Update="%(LitGitFilesNone.Identity)">
                <DependentUpon>%(LitGitFilesNone.Identity).template</DependentUpon>
            </None>
            <FileWrites Include="@(LitGitFilesNone.Identity)" />
            <FileWrites Include="%(LitGitFilesCompilable.Identity)" />
            <FileWrites Include="%(LitGitFilesProjects.Identity)" />
        </ItemGroup>
        <CreateProperty Value="$([System.String]::new('%(LitGitVariables.Identity)').Split('=', 2)[1])" >
            <Output TaskParameter="Value" PropertyName="LITGIT_$([System.String]::new('%(LitGitVariables.Identity)').Split('=', 2)[0])" />
        </CreateProperty>
        
        <PropertyGroup>
            <AssemblyVersion Condition="$(LitGitDefaultVersioning) == True And '$(AssemblyVersion)' == ''">$(LITGIT_VERSION_LONG)</AssemblyVersion>
            <FileVersion Condition="$(LitGitDefaultVersioning) == True And '$(FileVersion)' == ''">$(LITGIT_VERSION_LONG)</FileVersion>
            <InformationalVersion Condition="$(LitGitDefaultVersioning) == True And '$(InformationalVersion)' == ''">$(LITGIT_INFORMATIONAL_VERSION)</InformationalVersion>
            <PackageVersion Condition="$(LitGitDefaultVersioning) == True And '$(PackageVersion)' == '1.0.0'">$(LITGIT_VERSION_FULL)</PackageVersion>
            <RepositoryUrl Condition="$(LitGitDefaultVersioning) == True And $(LitGitIncludeProjectUrl) == True">$(LITGIT_PROJECT_URL)</RepositoryUrl>
        </PropertyGroup>
        
        <!--
        <Warning Text="Test for value: $(LITGIT_INFORMATIONAL_VERSION)" />
        <Warning Text="Vars: %(LitGitVariables.Identity)" />
        <Warning Text="Compiling: %(LitGitFilesCompilable.Identity)" />
        <Warning Text="None: %(LitGitFilesNone.Identity)" />
        -->
    </Target>
</Project>
